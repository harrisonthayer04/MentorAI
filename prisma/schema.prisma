datasource db {
  provider = "postgresql"
  // Use Accelerate (prisma+postgres) for Prisma Client at runtime
  url       = env("PRISMA_DATABASE_URL")
  // Use a direct Postgres connection for migrations/CLI
  directUrl = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum MessageRole {
  user
  assistant
  system
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Custom fields for your app:
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  conversations Conversation[]
}

model Account {
  userId                 String
  type                   String
  provider               String
  providerAccountId      String
  access_token           String?   @db.Text
  token_type             String?
  scope                  String?
  id_token               String?   @db.Text
  session_state          String?
  refresh_token          String?   @db.Text
  expires_at             Int?
  oauth_token_secret     String?   @db.Text
  oauth_token            String?   @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([userId, updatedAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String       @db.Text
  createdAt      DateTime     @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}