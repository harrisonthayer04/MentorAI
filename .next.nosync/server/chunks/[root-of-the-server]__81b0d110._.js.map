{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/harrisonthayer/Library/Mobile%20Documents/com~apple~CloudDocs/Code/random_projects/babymentorai/babymentorai/src/app/api/chat/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\n\ntype IncomingMessage = { role: \"user\" | \"assistant\" | \"system\"; content: string };\n\nconst MODEL_SLUGS: Record<string, string> = {\n  \"gpt-5-chat\": \"openai/gpt-5-chat\", // map to a supported model slug; adjust when gpt-5 is available\n  \"gpt-5-mini\": \"openai/gpt-5-mini\",\n  \"gpt-5-nano\": \"openai/gpt-5-nano\",\n};\n\nexport async function POST(req: Request) {\n  try {\n    const { modelId, messages } = (await req.json()) as {\n      modelId?: string;\n      messages?: IncomingMessage[];\n    };\n\n    if (!process.env.OPENROUTER_API_KEY) {\n      return NextResponse.json(\n        { error: \"Server missing OPENROUTER_API_KEY\" },\n        { status: 500 }\n      );\n    }\n\n    if (!modelId || !messages || !Array.isArray(messages)) {\n      return NextResponse.json({ error: \"Invalid payload\" }, { status: 400 });\n    }\n\n    const model = MODEL_SLUGS[modelId] ?? modelId;\n\n    const resp = await fetch(\"https://openrouter.ai/api/v1/chat/completions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,\n        \"HTTP-Referer\": process.env.NEXTAUTH_URL || \"http://localhost:3000\",\n        \"X-Title\": \"BabyMentorAI\",\n      },\n      body: JSON.stringify({\n        model,\n        messages,\n        temperature: 0.2,\n      }),\n    });\n\n    if (!resp.ok) {\n      const text = await resp.text();\n      return NextResponse.json({ error: text }, { status: 502 });\n    }\n\n    const data = await resp.json();\n    const content = data?.choices?.[0]?.message?.content ?? \"\";\n    return NextResponse.json({ content });\n  } catch (err: unknown) {\n    const message = err instanceof Error ? err.message : String(err);\n    return NextResponse.json({ error: message }, { status: 500 });\n  }\n}\n\n\n"],"names":[],"mappings":";;;AAAA;;AAIA,MAAM,cAAsC;IAC1C,cAAc;IACd,cAAc;IACd,cAAc;AAChB;AAEO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAI,MAAM,IAAI,IAAI;QAK7C,IAAI,CAAC,QAAQ,GAAG,CAAC,kBAAkB,EAAE;YACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoC,GAC7C;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,OAAO,CAAC,WAAW;YACrD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,MAAM,QAAQ,WAAW,CAAC,QAAQ,IAAI;QAEtC,MAAM,OAAO,MAAM,MAAM,iDAAiD;YACxE,QAAQ;YACR,SAAS;gBACP,gBAAgB;gBAChB,eAAe,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,kBAAkB,EAAE;gBACzD,gBAAgB,QAAQ,GAAG,CAAC,YAAY,IAAI;gBAC5C,WAAW;YACb;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;gBACA,aAAa;YACf;QACF;QAEA,IAAI,CAAC,KAAK,EAAE,EAAE;YACZ,MAAM,OAAO,MAAM,KAAK,IAAI;YAC5B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAK,GAAG;gBAAE,QAAQ;YAAI;QAC1D;QAEA,MAAM,OAAO,MAAM,KAAK,IAAI;QAC5B,MAAM,UAAU,MAAM,SAAS,CAAC,EAAE,EAAE,SAAS,WAAW;QACxD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAQ;IACrC,EAAE,OAAO,KAAc;QACrB,MAAM,UAAU,eAAe,QAAQ,IAAI,OAAO,GAAG,OAAO;QAC5D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAQ,GAAG;YAAE,QAAQ;QAAI;IAC7D;AACF","debugId":null}}]
}